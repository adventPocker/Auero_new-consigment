# User-Side API Documentation

## Base URL
`http://localhost:8000/api/`

## 1. Authentication

### Customer Signup
- **Endpoint**: `POST /auth/signup/customer/`
- **Payload**:
```json
{
    "username": "string",
    "email": "string",
    "password": "string",
    "user_type": "customer"
}
```
- **Response** (201 Created):
```json
{
    "status": "success",
    "message": "Customer registration successful",
    "user": {
        "id": "number",
        "username": "string",
        "email": "string",
        "user_type": "customer",
        "phone_number": "string",
        "profile_image": "string"
    },
    "tokens": {
        "refresh": "string",
        "access": "string"
    }
}
```

### Customer Login
- **Endpoint**: `POST /auth/login/`
- **Payload**:
```json
{
    "email": "string",
    "password": "string"
}
```
- **Response** (200 OK):
```json
{
    "user": {
        "id": "number",
        "username": "string",
        "email": "string",
        "user_type": "customer",
        "phone_number": "string",
        "profile_image": "string"
    },
    "tokens": {
        "access": "string",
        "refresh": "string"
    }
}
```

### Logout
- **Endpoint**: `POST /auth/logout/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Payload**:
```json
{
    "refresh_token": "string"
}
```
- **Response** (200 OK):
```json
{
    "status": "success",
    "message": "Successfully logged out"
}
```

### Get Current User Profile
- **Endpoint**: `GET /auth/me/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
{
    "status": "success",
    "user": {
        "id": "number",
        "username": "string",
        "email": "string",
        "user_type": "customer",
        "phone_number": "string",
        "profile_image": "string"
    }
}
```

### Update User Profile
- **Endpoint**: `PATCH /auth/me/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Payload**:
```json
{
    "username": "string",
    "phone_number": "string",
    "profile_image": "file"
}
```
- **Response** (200 OK):
```json
{
    "status": "success",
    "user": {
        // Updated user object
    }
}
```

### Password Management

#### Request Password Reset
- **Endpoint**: `POST /auth/password/reset/`
- **Payload**:
```json
{
    "email": "string"
}
```
- **Response** (200 OK):
```json
{
    "status": "success",
    "uid": "string",
    "token": "string",
    "message": "Password reset link generated."
}
```

#### Confirm Password Reset
- **Endpoint**: `POST /auth/password/reset/confirm/`
- **Payload**:
```json
{
    "uid": "string",
    "token": "string",
    "new_password": "string"
}
```
- **Response** (200 OK):
```json
{
    "status": "success",
    "message": "Password has been reset successfully."
}
```

#### Change Password
- **Endpoint**: `POST /auth/password/change/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Payload**:
```json
{
    "old_password": "string",
    "new_password": "string"
}
```
- **Response** (200 OK):
```json
{
    "status": "success",
    "message": "Password changed successfully."
}
```

### Address Management

#### List User Addresses
- **Endpoint**: `GET /auth/addresses/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
[
    {
        "id": "number",
        "address_line1": "string",
        "address_line2": "string",
        "city": "string",
        "state": "string",
        "postal_code": "string",
        "country": "string"
    }
]
```

#### Create Address
- **Endpoint**: `POST /auth/addresses/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Payload**:
```json
{
    "address_line1": "string",
    "address_line2": "string",
    "city": "string",
    "state": "string",
    "postal_code": "string",
    "country": "string"
}
```
- **Response** (201 Created):
```json
{
    // Created address object
}
```

#### Update Address
- **Endpoint**: `PUT /auth/addresses/<id>/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Payload**: Same as Create Address
- **Response** (200 OK):
```json
{
    // Updated address object
}
```

#### Delete Address
- **Endpoint**: `DELETE /auth/addresses/<id>/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (204 No Content)

## 2. Products

### Categories

#### List All Categories
- **Endpoint**: `GET /products/categories/`
- **Response** (200 OK):
```json
[
    {
        "id": "number",
        "name": "string",
        "name_ar": "string",
        "description": "string",
        "description_ar": "string",
        "banner_image": "string",
        "image": "string",
        "is_active": "boolean",
        "slug": "string"
    }
]
```

#### Get Category Details
- **Endpoint**: `GET /products/categories/<id>/`
- **Response** (200 OK):
```json
{
    "id": "number",
    "name": "string",
    "name_ar": "string",
    "description": "string",
    "description_ar": "string",
    "banner_image": "string",
    "image": "string",
    "is_active": "boolean",
    "slug": "string"
}
```

#### Get Products in Category
- **Endpoint**: `GET /products/categories/<id>/products/`
- **Response** (200 OK):
```json
[
    {
        "id": "number",
        "name": "string",
        "name_ar": "string",
        "description": "string",
        "description_ar": "string",
        "selling_price": "number",
        "images": [
            {
                "id": "number",
                "image": "string",
                "is_primary": "boolean"
            }
        ]
    }
]
```

### Products

#### List All Products
- **Endpoint**: `GET /products/products/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
[
    {
        "id": "number",
        "name": "string",
        "name_ar": "string",
        "description": "string",
        "description_ar": "string",
        "selling_price": "number",
        "category": {
            "id": "number",
            "name": "string"
        },
        "images": [
            {
                "id": "number",
                "image": "string",
                "is_primary": "boolean"
            }
        ],
        "status": "string"
    }
]
```

#### Get Product Details
- **Endpoint**: `GET /products/products/<id>/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
{
    "id": "number",
    "name": "string",
    "name_ar": "string",
    "description": "string",
    "description_ar": "string",
    "selling_price": "number",
    "category": {
        "id": "number",
        "name": "string"
    },
    "images": [
        {
            "id": "number",
            "image": "string",
            "is_primary": "boolean"
        }
    ],
    "status": "string",
    "consignment": {
        "id": "number",
        "handover_date": "string",
        "inspection_date": "string",
        "physical_status": "string",
        "quality_notes": "string",
        "authentication_notes": "string"
    }
}
```

#### Search Products
- **Endpoint**: `GET /products/search/`
- **Query Parameters**:
  - `q`: Search query (string)
  - `category`: Category ID (number)
  - `min_price`: Minimum price (number)
  - `max_price`: Maximum price (number)
  - `status`: Product status (string)
  - `ordering`: Order by field (string)
    - `-selling_price`: Price high to low
    - `selling_price`: Price low to high
    - `-created_at`: Newest first
    - `created_at`: Oldest first
  - `page`: Page number (number)
  - `page_size`: Items per page (number)
- **Response** (200 OK):
```json
{
    "count": "number",
    "next": "string | null",
    "previous": "string | null",
    "results": [
        {
            "id": "number",
            "name": "string",
            "name_ar": "string",
            "description": "string",
            "description_ar": "string",
            "selling_price": "number",
            "category": {
                "id": "number",
                "name": "string"
            },
            "images": [
                {
                    "id": "number",
                    "image": "string",
                    "is_primary": "boolean"
                }
            ],
            "status": "string"
        }
    ]
}
```

#### Get Product Images
- **Endpoint**: `GET /products/products/<id>/images/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
[
    {
        "id": "number",
        "image": "string",
        "is_primary": "boolean",
        "created_at": "string"
    }
]
```

### Product Status Values
- `PENDING`: Product is pending approval
- `APPROVED`: Product is approved and available for sale
- `REJECTED`: Product has been rejected
- `SOLD`: Product has been sold
- `INACTIVE`: Product is temporarily inactive

### Product Ordering Options
- `-selling_price`: Sort by price (high to low)
- `selling_price`: Sort by price (low to high)
- `-created_at`: Sort by newest first
- `created_at`: Sort by oldest first
- `name`: Sort by name (A to Z)
- `-name`: Sort by name (Z to A)

## 3. Cart

### User Cart Operations

#### Get User Cart
- **Endpoint**: `GET /cart/user/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
{
    "id": "number",
    "items": [
        {
            "id": "number",
            "product": {
                "id": "number",
                "name": "string",
                "selling_price": "number",
                "image": "string"
            },
            "quantity": "number",
            "total_price": "number"
        }
    ],
    "total": "number"
}
```

#### Add Item to User Cart
- **Endpoint**: `POST /cart/user/add/`
- **Headers**: 
  - `Authorization: Bearer <access_token>`
  - `Content-Type: application/json`
- **Payload**:
```json
{
    "product_id": "number",
    "quantity": "number"
}
```
- **Response** (201 Created):
```json
{
    // Updated cart object
}
```

#### Remove Item from User Cart
- **Endpoint**: `POST /cart/user/remove/`
- **Headers**: 
  - `Authorization: Bearer <access_token>`
  - `Content-Type: application/json`
- **Payload**:
```json
{
    "product_id": "number"
}
```
- **Response** (200 OK):
```json
{
    // Updated cart object
}
```

#### Update Item Quantity in User Cart
- **Endpoint**: `POST /cart/user/update/`
- **Headers**: 
  - `Authorization: Bearer <access_token>`
  - `Content-Type: application/json`
- **Payload**:
```json
{
    "product_id": "number",
    "quantity": "number"
}
```
- **Response** (200 OK):
```json
{
    // Updated cart object
}
```

#### Clear User Cart
- **Endpoint**: `POST /cart/user/clear/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
{
    "message": "Cart cleared successfully"
}
```

### Guest Cart Operations

#### Get Guest Cart
- **Endpoint**: `GET /cart/guest/`
- **Query Parameters**:
  - `session_key`: Guest session identifier
- **Response** (200 OK):
```json
{
    "id": "number",
    "items": [
        {
            "id": "number",
            "product": {
                "id": "number",
                "name": "string",
                "selling_price": "number",
                "image": "string"
            },
            "quantity": "number",
            "total_price": "number"
        }
    ],
    "total": "number"
}
```

#### Add Item to Guest Cart
- **Endpoint**: `POST /cart/guest/add/`
- **Headers**: `Content-Type: application/json`
- **Payload**:
```json
{
    "session_key": "string",
    "product_id": "number",
    "quantity": "number"
}
```
- **Response** (201 Created):
```json
{
    // Updated cart object
}
```

#### Remove Item from Guest Cart
- **Endpoint**: `POST /cart/guest/remove/`
- **Headers**: `Content-Type: application/json`
- **Payload**:
```json
{
    "session_key": "string",
    "product_id": "number"
}
```
- **Response** (200 OK):
```json
{
    // Updated cart object
}
```

#### Update Item Quantity in Guest Cart
- **Endpoint**: `POST /cart/guest/update/`
- **Headers**: `Content-Type: application/json`
- **Payload**:
```json
{
    "session_key": "string",
    "product_id": "number",
    "quantity": "number"
}
```
- **Response** (200 OK):
```json
{
    // Updated cart object
}
```

#### Clear Guest Cart
- **Endpoint**: `POST /cart/guest/clear/`
- **Headers**: `Content-Type: application/json`
- **Payload**:
```json
{
    "session_key": "string"
}
```
- **Response** (200 OK):
```json
{
    "message": "Cart cleared successfully"
}
```

### Cart Merge Operation

#### Merge Guest Cart into User Cart
- **Endpoint**: `POST /cart/merge/`
- **Headers**: 
  - `Authorization: Bearer <access_token>`
  - `Content-Type: application/json`
- **Payload**:
```json
{
    "session_key": "string"
}
```
- **Response** (200 OK):
```json
{
    "message": "Cart merged successfully",
    "cart": {
        // Merged cart object
    }
}
```

## 4. Orders

### Order Management

#### List User Orders
- **Endpoint**: `GET /orders/orders/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
[
    {
        "id": "number",
        "order_number": "string",
        "status": "string",
        "total": "number",
        "created_at": "string",
        "payment_status": "string",
        "shipping_status": "string"
    }
]
```

#### Get Order Details
- **Endpoint**: `GET /orders/orders/<id>/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
{
    "id": "number",
    "order_number": "string",
    "status": "string",
    "total": "number",
    "items": [
        {
            "product": {
                "id": "number",
                "name": "string",
                "image": "string"
            },
            "quantity": "number",
            "price": "number",
            "total": "number"
        }
    ],
    "shipping_address": {
        "id": "number",
        "address_line1": "string",
        "address_line2": "string",
        "city": "string",
        "state": "string",
        "postal_code": "string",
        "country": "string"
    },
    "payment_details": {
        "method": "string",
        "status": "string",
        "transaction_id": "string",
        "paid_at": "string"
    },
    "shipping_details": {
        "status": "string",
        "tracking_number": "string",
        "estimated_delivery": "string"
    },
    "created_at": "string",
    "updated_at": "string"
}
```

### Payout Management

#### List User Payouts
- **Endpoint**: `GET /orders/payouts/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
[
    {
        "id": "number",
        "order": {
            "id": "number",
            "order_number": "string"
        },
        "amount": "number",
        "status": "string",
        "created_at": "string",
        "paid_at": "string"
    }
]
```

#### Get Payout Details
- **Endpoint**: `GET /orders/payouts/<id>/`
- **Headers**: `Authorization: Bearer <access_token>`
- **Response** (200 OK):
```json
{
    "id": "number",
    "order": {
        "id": "number",
        "order_number": "string",
        "total": "number"
    },
    "amount": "number",
    "status": "string",
    "payment_method": "string",
    "payment_notes": "string",
    "created_at": "string",
    "paid_at": "string"
}
```

### Order Status Values
- `PENDING`: Order is pending payment
- `PAID`: Order has been paid
- `PROCESSING`: Order is being processed
- `SHIPPED`: Order has been shipped
- `DELIVERED`: Order has been delivered
- `CANCELLED`: Order has been cancelled
- `REFUNDED`: Order has been refunded

### Payment Status Values
- `PENDING`: Payment is pending
- `COMPLETED`: Payment has been completed
- `FAILED`: Payment has failed
- `REFUNDED`: Payment has been refunded

### Shipping Status Values
- `PENDING`: Shipping is pending
- `PROCESSING`: Order is being prepared for shipping
- `SHIPPED`: Order has been shipped
- `DELIVERED`: Order has been delivered
- `RETURNED`: Order has been returned

### Payout Status Values
- `PENDING`: Payout is pending
- `PROCESSED`: Payout has been processed
- `PAID`: Payout has been paid
- `FAILED`: Payout has failed

## Important Notes

1. **Authentication**:
   - All authenticated endpoints require the `Authorization` header
   - Format: `Bearer <access_token>`
   - Access tokens expire after a certain time
   - Use refresh token to get new access token

2. **Error Responses**:
   - 400 Bad Request: Invalid input data
   - 401 Unauthorized: Missing or invalid authentication
   - 403 Forbidden: Insufficient permissions
   - 404 Not Found: Resource doesn't exist
   - 500 Internal Server Error: Server-side error

3. **Pagination**:
   - List endpoints support pagination
   - Use `page` and `page_size` query parameters
   - Response includes `count`, `next`, and `previous` fields

4. **Image URLs**:
   - Image URLs are relative to the media root
   - Prepend the base URL to get the full URL
   - Example: `http://localhost:8000/media/product_images/image.jpg` 