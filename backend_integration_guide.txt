# Backend Integration Guide

## Base URL
The backend API is served at: `http://localhost:8000/api/`

## Non-Authenticated Endpoints

### 1. Products
- List all approved products: GET `/products/`
- Search products: GET `/products/search/?q=<query>&category=<id>&min_price=<price>&max_price=<price>&status=<status>&ordering=<field>`
- Get product details: GET `/products/<id>/`
- Get product images: GET `/products/<id>/images/`

### 2. Categories
- List all categories: GET `/categories/`
- Get category details: GET `/categories/<id>/`
- Get products in category: GET `/categories/<id>/products/`

## Frontend Integration Steps

### 1. Setup API Service
Create a new file `src/services/api.ts`:

```typescript
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8000/api';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

export default api;
```

### 2. Create Type Definitions
Create `src/types/index.ts`:

```typescript
export interface Category {
  id: number;
  name: string;
  name_ar: string;
  description: string;
  description_ar: string;
  banner_image: string;
  image: string;
  is_active: boolean;
  slug: string;
  created_at: string;
  updated_at: string;
}

export interface Product {
  id: number;
  vendor: number;
  vendor_name: string;
  category: number;
  category_name: string;
  name: string;
  name_ar: string;
  slug: string;
  description: string;
  description_ar: string;
  vendor_price: number;
  selling_price: number;
  platform_fee: number;
  vendor_payout: number;
  payout_status: string;
  status: string;
  inspection_notes: string;
  created_at: string;
  updated_at: string;
  images: ProductImage[];
  consignment: ConsignmentDetails;
}

export interface ProductImage {
  id: number;
  image: string;
  is_primary: boolean;
  created_at: string;
}

export interface ConsignmentDetails {
  id: number;
  handover_date: string;
  inspection_date: string;
  physical_status: string;
  inspector: number;
  inspector_name: string;
  quality_notes: string;
  authentication_notes: string;
  created_at: string;
  updated_at: string;
}
```

### 3. Create API Services
Create `src/services/productService.ts`:

```typescript
import api from './api';
import { Product, Category } from '../types';

export const productService = {
  // Get all approved products
  getAllProducts: async () => {
    const response = await api.get<Product[]>('/products/');
    return response.data;
  },

  // Search products
  searchProducts: async (params: {
    query?: string;
    category?: number;
    min_price?: number;
    max_price?: number;
    status?: string;
    ordering?: string;
  }) => {
    const response = await api.get<{
      count: number;
      next: string | null;
      previous: string | null;
      results: Product[];
    }>('/products/search/', { params });
    return response.data;
  },

  // Get product details
  getProductById: async (id: number) => {
    const response = await api.get<Product>(`/products/${id}/`);
    return response.data;
  },

  // Get all categories
  getAllCategories: async () => {
    const response = await api.get<Category[]>('/categories/');
    return response.data;
  },

  // Get category details
  getCategoryById: async (id: number) => {
    const response = await api.get<Category>(`/categories/${id}/`);
    return response.data;
  },

  // Get products in category
  getCategoryProducts: async (id: number) => {
    const response = await api.get<Product[]>(`/categories/${id}/products/`);
    return response.data;
  },
};
```

### 4. Integration in Pages

#### Home Page
```typescript
import { useEffect, useState } from 'react';
import { productService } from '../services/productService';
import { Product, Category } from '../types';

export default function HomePage() {
  const [featuredProducts, setFeaturedProducts] = useState<Product[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [products, categories] = await Promise.all([
          productService.getAllProducts(),
          productService.getAllCategories(),
        ]);
        setFeaturedProducts(products);
        setCategories(categories);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  return (
    // Your JSX here
  );
}
```

#### Category Page
```typescript
import { useEffect, useState } from 'react';
import { productService } from '../services/productService';
import { Category } from '../types';

export default function CategoryPage() {
  const [categories, setCategories] = useState<Category[]>([]);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const data = await productService.getAllCategories();
        setCategories(data);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  return (
    // Your JSX here
  );
}
```

#### Category Detail Page
```typescript
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { productService } from '../services/productService';
import { Category, Product } from '../types';

export default function CategoryDetailPage() {
  const { id } = useParams<{ id: string }>();
  const [category, setCategory] = useState<Category | null>(null);
  const [products, setProducts] = useState<Product[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [categoryData, productsData] = await Promise.all([
          productService.getCategoryById(Number(id)),
          productService.getCategoryProducts(Number(id)),
        ]);
        setCategory(categoryData);
        setProducts(productsData);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    if (id) {
      fetchData();
    }
  }, [id]);

  return (
    // Your JSX here
  );
}
```

#### Product Detail Page
```typescript
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { productService } from '../services/productService';
import { Product } from '../types';

export default function ProductDetailPage() {
  const { id } = useParams<{ id: string }>();
  const [product, setProduct] = useState<Product | null>(null);

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const data = await productService.getProductById(Number(id));
        setProduct(data);
      } catch (error) {
        console.error('Error fetching product:', error);
      }
    };

    if (id) {
      fetchProduct();
    }
  }, [id]);

  return (
    // Your JSX here
  );
}
```

## Error Handling
Create a utility function for handling API errors in `src/utils/errorHandler.ts`:

```typescript
export const handleApiError = (error: any) => {
  if (error.response) {
    // The request was made and the server responded with a status code
    // that falls out of the range of 2xx
    console.error('API Error:', error.response.data);
    return error.response.data;
  } else if (error.request) {
    // The request was made but no response was received
    console.error('No response received:', error.request);
    return { error: 'No response received from server' };
  } else {
    // Something happened in setting up the request that triggered an Error
    console.error('Error:', error.message);
    return { error: error.message };
  }
};
```

## Best Practices
1. Always use TypeScript for type safety
2. Implement proper error handling
3. Use loading states for better UX
4. Implement proper caching strategies
5. Use environment variables for API URLs
6. Implement proper pagination handling
7. Use proper state management (Redux/Context) for larger applications

## Next Steps
1. Implement authentication
2. Add cart functionality
3. Implement order management
4. Add user profile management
5. Implement admin dashboard

## Notes
- All non-authenticated endpoints are accessible without any authentication
- Product images are served from the backend media URL
- The backend uses Django REST Framework's pagination
- All dates are in ISO 8601 format
- Arabic translations are available for most fields 